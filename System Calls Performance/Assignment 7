CS 621 – Operating System Design
Programming Assignment #7

Measuring the Performance of I/O System Calls

There are several goals for this assignment: 
1.	Get experience with efficiency issues in writing programs. 
2.	Get experience with the process of measurement and benchmarking. 
3.	Expand your understanding of how Linux I/O library routines are structured. 
4.	Learning how timing system calls work. 
For system programs, merely printing out the correct answer is not sufficient; the program must run well. In this assignment, you will be studying the cost of making I/O system calls, and the effect of buffering on reducing some of this cost. You will learn about simple timing routines and use them to measure the time it takes to write a large file under various situations. 
The key specifications for the assignment are: 
•	Measure the time to write a large file using two different output routine: 
1.	directly calling the UNIX write system call, and 
2.	using the standard I/O library routine fwrite. 
•	For each of the two cases above, you will repeat the experiment, using a write size of 2, 16, 128, 1024 (1K), 8192 (8K), and 65,536 (64K) bytes, in each experiment. 
In other words, for the first experiment, your program will first open (create) the file, write to the file 2-byte at a time using the write system call, and then close the file. It will do this 10 times, creating 10 new files, each copy with a different name). 
•	Your program will then repeat this procedure, writing 16-bytes at a time, and so on, up to 64KB at a time. 
•	Your program will then repeat these six cases, but using the fwrite call instead of write. 
•	The file size that you will create each time will be 128KB.
•	Make sure to create the file in the /tmp directory so that you are measuring on the local file system cost and not overhead associated with a file server. 
Timing Issues

You will measure the elapsed times for each of the 10 test cases. Before the start of your write loop, your program will call the gettimeofday system call; immediately after the loop, it will again call gettimeofday. The difference between these two values is the elapsed time. You will also record the number of write operations (numbers of calls to write or fwrite. 
Note that time kernel call is precise only to a second. This precision is not sufficient for this assignment, so you should use a more precise measure, the gettimeofday call. (There are even more precise measurement methods, such as the rdtsc instruction on a Pentium processor.) 
The Experimental Method

Computer Scientists are notably sloppy experimentalists. While we do a lot of experimental work, we typically do not follow good experimental practice. The experimental method is a well-established regimen, used in all areas of science. The use of the experimental method keeps us honest and gives form to the work that we do. 
Specifically, you are to: 
1.	Perform the experiments: Run your program for each of the cases described above, recording the results in a table or another format. Besides time and number of calls, you should also calculate time per write and time per byte. 
2.	Summarize the results. Write a paragraph to summarize what patterns you see in the results. 
3.	Draw conclusions: Write a paragraph explaining what you can conclude about the results. The goal of the conclusions is to try to explain why the patterns appeared. Why the results for write so different from 2 to 64K bytes? Why do the results for write and fwrite differ? What can you conclude about the way in which fwrite works? 
Note that performing the experiment and summarizing the results are separate steps and both come before you draw conclusions. To present honest and understandable results, we must present the basic data first (so that the reader can draw their own conclusions) before you insert your bias. 

